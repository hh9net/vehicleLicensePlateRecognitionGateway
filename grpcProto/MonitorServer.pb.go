// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.0
// source: MonitorServer.proto

package grpcProto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The request message containing the user's name.
type HelloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MonitorServer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MonitorServer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_MonitorServer_proto_rawDescGZIP(), []int{0}
}

func (x *HelloRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The response message containing the greetings
type HelloReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *HelloReply) Reset() {
	*x = HelloReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MonitorServer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloReply) ProtoMessage() {}

func (x *HelloReply) ProtoReflect() protoreflect.Message {
	mi := &file_MonitorServer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloReply.ProtoReflect.Descriptor instead.
func (*HelloReply) Descriptor() ([]byte, []int) {
	return file_MonitorServer_proto_rawDescGZIP(), []int{1}
}

func (x *HelloReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type HeartbeatMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processid string `protobuf:"bytes,1,opt,name=processid,proto3" json:"processid,omitempty"`
	Cameraid  string `protobuf:"bytes,2,opt,name=cameraid,proto3" json:"cameraid,omitempty"`
}

func (x *HeartbeatMessageRequest) Reset() {
	*x = HeartbeatMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MonitorServer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatMessageRequest) ProtoMessage() {}

func (x *HeartbeatMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MonitorServer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatMessageRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatMessageRequest) Descriptor() ([]byte, []int) {
	return file_MonitorServer_proto_rawDescGZIP(), []int{2}
}

func (x *HeartbeatMessageRequest) GetProcessid() string {
	if x != nil {
		return x.Processid
	}
	return ""
}

func (x *HeartbeatMessageRequest) GetCameraid() string {
	if x != nil {
		return x.Cameraid
	}
	return ""
}

type HeartbeatMessageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processid string `protobuf:"bytes,1,opt,name=processid,proto3" json:"processid,omitempty"`
	Cameraid  string `protobuf:"bytes,2,opt,name=cameraid,proto3" json:"cameraid,omitempty"`
}

func (x *HeartbeatMessageReply) Reset() {
	*x = HeartbeatMessageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MonitorServer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatMessageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatMessageReply) ProtoMessage() {}

func (x *HeartbeatMessageReply) ProtoReflect() protoreflect.Message {
	mi := &file_MonitorServer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatMessageReply.ProtoReflect.Descriptor instead.
func (*HeartbeatMessageReply) Descriptor() ([]byte, []int) {
	return file_MonitorServer_proto_rawDescGZIP(), []int{3}
}

func (x *HeartbeatMessageReply) GetProcessid() string {
	if x != nil {
		return x.Processid
	}
	return ""
}

func (x *HeartbeatMessageReply) GetCameraid() string {
	if x != nil {
		return x.Cameraid
	}
	return ""
}

type PictureIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processid string `protobuf:"bytes,1,opt,name=processid,proto3" json:"processid,omitempty"`
	Cameraid  string `protobuf:"bytes,2,opt,name=cameraid,proto3" json:"cameraid,omitempty"`
}

func (x *PictureIndexRequest) Reset() {
	*x = PictureIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MonitorServer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PictureIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PictureIndexRequest) ProtoMessage() {}

func (x *PictureIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MonitorServer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PictureIndexRequest.ProtoReflect.Descriptor instead.
func (*PictureIndexRequest) Descriptor() ([]byte, []int) {
	return file_MonitorServer_proto_rawDescGZIP(), []int{4}
}

func (x *PictureIndexRequest) GetProcessid() string {
	if x != nil {
		return x.Processid
	}
	return ""
}

func (x *PictureIndexRequest) GetCameraid() string {
	if x != nil {
		return x.Cameraid
	}
	return ""
}

type PictureIndexReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processid string `protobuf:"bytes,1,opt,name=processid,proto3" json:"processid,omitempty"`
	Cameraid  string `protobuf:"bytes,2,opt,name=cameraid,proto3" json:"cameraid,omitempty"`
	Picindex  string `protobuf:"bytes,3,opt,name=picindex,proto3" json:"picindex,omitempty"`
}

func (x *PictureIndexReply) Reset() {
	*x = PictureIndexReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MonitorServer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PictureIndexReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PictureIndexReply) ProtoMessage() {}

func (x *PictureIndexReply) ProtoReflect() protoreflect.Message {
	mi := &file_MonitorServer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PictureIndexReply.ProtoReflect.Descriptor instead.
func (*PictureIndexReply) Descriptor() ([]byte, []int) {
	return file_MonitorServer_proto_rawDescGZIP(), []int{5}
}

func (x *PictureIndexReply) GetProcessid() string {
	if x != nil {
		return x.Processid
	}
	return ""
}

func (x *PictureIndexReply) GetCameraid() string {
	if x != nil {
		return x.Cameraid
	}
	return ""
}

func (x *PictureIndexReply) GetPicindex() string {
	if x != nil {
		return x.Picindex
	}
	return ""
}

type NewPictureCaptureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processid        string `protobuf:"bytes,1,opt,name=Processid,proto3" json:"Processid,omitempty"`
	Cameraid         string `protobuf:"bytes,2,opt,name=Cameraid,proto3" json:"Cameraid,omitempty"`
	LocalPicturePath string `protobuf:"bytes,3,opt,name=LocalPicturePath,proto3" json:"LocalPicturePath,omitempty"`
	LocalXmldataPath string `protobuf:"bytes,4,opt,name=LocalXmldataPath,proto3" json:"LocalXmldataPath,omitempty"`
	Plate            string `protobuf:"bytes,5,opt,name=Plate,proto3" json:"Plate,omitempty"`
	CaptureDateTime  string `protobuf:"bytes,6,opt,name=CaptureDateTime,proto3" json:"CaptureDateTime,omitempty"`
}

func (x *NewPictureCaptureRequest) Reset() {
	*x = NewPictureCaptureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MonitorServer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewPictureCaptureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPictureCaptureRequest) ProtoMessage() {}

func (x *NewPictureCaptureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MonitorServer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPictureCaptureRequest.ProtoReflect.Descriptor instead.
func (*NewPictureCaptureRequest) Descriptor() ([]byte, []int) {
	return file_MonitorServer_proto_rawDescGZIP(), []int{6}
}

func (x *NewPictureCaptureRequest) GetProcessid() string {
	if x != nil {
		return x.Processid
	}
	return ""
}

func (x *NewPictureCaptureRequest) GetCameraid() string {
	if x != nil {
		return x.Cameraid
	}
	return ""
}

func (x *NewPictureCaptureRequest) GetLocalPicturePath() string {
	if x != nil {
		return x.LocalPicturePath
	}
	return ""
}

func (x *NewPictureCaptureRequest) GetLocalXmldataPath() string {
	if x != nil {
		return x.LocalXmldataPath
	}
	return ""
}

func (x *NewPictureCaptureRequest) GetPlate() string {
	if x != nil {
		return x.Plate
	}
	return ""
}

func (x *NewPictureCaptureRequest) GetCaptureDateTime() string {
	if x != nil {
		return x.CaptureDateTime
	}
	return ""
}

type NewPictureCaptureReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processid string `protobuf:"bytes,1,opt,name=Processid,proto3" json:"Processid,omitempty"`
	Cameraid  string `protobuf:"bytes,2,opt,name=Cameraid,proto3" json:"Cameraid,omitempty"`
}

func (x *NewPictureCaptureReply) Reset() {
	*x = NewPictureCaptureReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MonitorServer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewPictureCaptureReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPictureCaptureReply) ProtoMessage() {}

func (x *NewPictureCaptureReply) ProtoReflect() protoreflect.Message {
	mi := &file_MonitorServer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPictureCaptureReply.ProtoReflect.Descriptor instead.
func (*NewPictureCaptureReply) Descriptor() ([]byte, []int) {
	return file_MonitorServer_proto_rawDescGZIP(), []int{7}
}

func (x *NewPictureCaptureReply) GetProcessid() string {
	if x != nil {
		return x.Processid
	}
	return ""
}

func (x *NewPictureCaptureReply) GetCameraid() string {
	if x != nil {
		return x.Cameraid
	}
	return ""
}

type CameraConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processid string `protobuf:"bytes,1,opt,name=processid,proto3" json:"processid,omitempty"`
	Cameraid  string `protobuf:"bytes,2,opt,name=cameraid,proto3" json:"cameraid,omitempty"`
}

func (x *CameraConfigRequest) Reset() {
	*x = CameraConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MonitorServer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraConfigRequest) ProtoMessage() {}

func (x *CameraConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MonitorServer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraConfigRequest.ProtoReflect.Descriptor instead.
func (*CameraConfigRequest) Descriptor() ([]byte, []int) {
	return file_MonitorServer_proto_rawDescGZIP(), []int{8}
}

func (x *CameraConfigRequest) GetProcessid() string {
	if x != nil {
		return x.Processid
	}
	return ""
}

func (x *CameraConfigRequest) GetCameraid() string {
	if x != nil {
		return x.Cameraid
	}
	return ""
}

type CameraConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processid   string `protobuf:"bytes,1,opt,name=processid,proto3" json:"processid,omitempty"`
	Cameraid    string `protobuf:"bytes,2,opt,name=cameraid,proto3" json:"cameraid,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	StationId   string `protobuf:"bytes,4,opt,name=stationId,proto3" json:"stationId,omitempty"`
	LaneType    int32  `protobuf:"varint,5,opt,name=laneType,proto3" json:"laneType,omitempty"`
	DevCompId   string `protobuf:"bytes,6,opt,name=devCompId,proto3" json:"devCompId,omitempty"`
	Description int32  `protobuf:"varint,7,opt,name=description,proto3" json:"description,omitempty"`
	DevIp       string `protobuf:"bytes,8,opt,name=devIp,proto3" json:"devIp,omitempty"`
	Port        int32  `protobuf:"varint,9,opt,name=port,proto3" json:"port,omitempty"`
	UserName    string `protobuf:"bytes,10,opt,name=userName,proto3" json:"userName,omitempty"`
	Password    string `protobuf:"bytes,11,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *CameraConfigReply) Reset() {
	*x = CameraConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MonitorServer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraConfigReply) ProtoMessage() {}

func (x *CameraConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_MonitorServer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraConfigReply.ProtoReflect.Descriptor instead.
func (*CameraConfigReply) Descriptor() ([]byte, []int) {
	return file_MonitorServer_proto_rawDescGZIP(), []int{9}
}

func (x *CameraConfigReply) GetProcessid() string {
	if x != nil {
		return x.Processid
	}
	return ""
}

func (x *CameraConfigReply) GetCameraid() string {
	if x != nil {
		return x.Cameraid
	}
	return ""
}

func (x *CameraConfigReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CameraConfigReply) GetStationId() string {
	if x != nil {
		return x.StationId
	}
	return ""
}

func (x *CameraConfigReply) GetLaneType() int32 {
	if x != nil {
		return x.LaneType
	}
	return 0
}

func (x *CameraConfigReply) GetDevCompId() string {
	if x != nil {
		return x.DevCompId
	}
	return ""
}

func (x *CameraConfigReply) GetDescription() int32 {
	if x != nil {
		return x.Description
	}
	return 0
}

func (x *CameraConfigReply) GetDevIp() string {
	if x != nil {
		return x.DevIp
	}
	return ""
}

func (x *CameraConfigReply) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *CameraConfigReply) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CameraConfigReply) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

var File_MonitorServer_proto protoreflect.FileDescriptor

var file_MonitorServer_proto_rawDesc = []byte{
	0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x22, 0x22, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x26, 0x0a, 0x0a, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x53, 0x0a, 0x17, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x15, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x69, 0x64, 0x22, 0x4f, 0x0a, 0x13, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x69, 0x64, 0x22, 0x69, 0x0a, 0x11, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x69, 0x63, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x69, 0x63, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0xec, 0x01, 0x0a, 0x18, 0x4e, 0x65, 0x77, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x58, 0x6d, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x58, 0x6d, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x69, 0x64, 0x22, 0x4f, 0x0a, 0x13, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x69, 0x64, 0x22, 0xbd, 0x02, 0x0a, 0x11, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x43, 0x6f, 0x6d,
	0x70, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x43, 0x6f,
	0x6d, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x76, 0x49, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x76, 0x49, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32, 0xde, 0x03, 0x0a, 0x0d, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x08, 0x53, 0x61,
	0x79, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x1b, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x59, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x17, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x4e, 0x65, 0x77, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x4e, 0x65, 0x77, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50,
	0x69, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x68, 0x0a, 0x16, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x6f, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_MonitorServer_proto_rawDescOnce sync.Once
	file_MonitorServer_proto_rawDescData = file_MonitorServer_proto_rawDesc
)

func file_MonitorServer_proto_rawDescGZIP() []byte {
	file_MonitorServer_proto_rawDescOnce.Do(func() {
		file_MonitorServer_proto_rawDescData = protoimpl.X.CompressGZIP(file_MonitorServer_proto_rawDescData)
	})
	return file_MonitorServer_proto_rawDescData
}

var file_MonitorServer_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_MonitorServer_proto_goTypes = []interface{}{
	(*HelloRequest)(nil),             // 0: monitorserver.HelloRequest
	(*HelloReply)(nil),               // 1: monitorserver.HelloReply
	(*HeartbeatMessageRequest)(nil),  // 2: monitorserver.HeartbeatMessageRequest
	(*HeartbeatMessageReply)(nil),    // 3: monitorserver.HeartbeatMessageReply
	(*PictureIndexRequest)(nil),      // 4: monitorserver.PictureIndexRequest
	(*PictureIndexReply)(nil),        // 5: monitorserver.PictureIndexReply
	(*NewPictureCaptureRequest)(nil), // 6: monitorserver.NewPictureCaptureRequest
	(*NewPictureCaptureReply)(nil),   // 7: monitorserver.NewPictureCaptureReply
	(*CameraConfigRequest)(nil),      // 8: monitorserver.CameraConfigRequest
	(*CameraConfigReply)(nil),        // 9: monitorserver.CameraConfigReply
}
var file_MonitorServer_proto_depIdxs = []int32{
	0, // 0: monitorserver.MonitorServer.SayHello:input_type -> monitorserver.HelloRequest
	8, // 1: monitorserver.MonitorServer.GetCameraConfig:input_type -> monitorserver.CameraConfigRequest
	6, // 2: monitorserver.MonitorServer.NotifyNewPictureCapture:input_type -> monitorserver.NewPictureCaptureRequest
	4, // 3: monitorserver.MonitorServer.GetPicIndex:input_type -> monitorserver.PictureIndexRequest
	2, // 4: monitorserver.MonitorServer.HeartbeatToLocalServer:input_type -> monitorserver.HeartbeatMessageRequest
	1, // 5: monitorserver.MonitorServer.SayHello:output_type -> monitorserver.HelloReply
	9, // 6: monitorserver.MonitorServer.GetCameraConfig:output_type -> monitorserver.CameraConfigReply
	7, // 7: monitorserver.MonitorServer.NotifyNewPictureCapture:output_type -> monitorserver.NewPictureCaptureReply
	5, // 8: monitorserver.MonitorServer.GetPicIndex:output_type -> monitorserver.PictureIndexReply
	3, // 9: monitorserver.MonitorServer.HeartbeatToLocalServer:output_type -> monitorserver.HeartbeatMessageReply
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_MonitorServer_proto_init() }
func file_MonitorServer_proto_init() {
	if File_MonitorServer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_MonitorServer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MonitorServer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MonitorServer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MonitorServer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatMessageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MonitorServer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PictureIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MonitorServer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PictureIndexReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MonitorServer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewPictureCaptureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MonitorServer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewPictureCaptureReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MonitorServer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MonitorServer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_MonitorServer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_MonitorServer_proto_goTypes,
		DependencyIndexes: file_MonitorServer_proto_depIdxs,
		MessageInfos:      file_MonitorServer_proto_msgTypes,
	}.Build()
	File_MonitorServer_proto = out.File
	file_MonitorServer_proto_rawDesc = nil
	file_MonitorServer_proto_goTypes = nil
	file_MonitorServer_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MonitorServerClient is the client API for MonitorServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonitorServerClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	GetCameraConfig(ctx context.Context, in *CameraConfigRequest, opts ...grpc.CallOption) (*CameraConfigReply, error)
	NotifyNewPictureCapture(ctx context.Context, in *NewPictureCaptureRequest, opts ...grpc.CallOption) (*NewPictureCaptureReply, error)
	GetPicIndex(ctx context.Context, in *PictureIndexRequest, opts ...grpc.CallOption) (*PictureIndexReply, error)
	HeartbeatToLocalServer(ctx context.Context, in *HeartbeatMessageRequest, opts ...grpc.CallOption) (*HeartbeatMessageReply, error)
}

type monitorServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitorServerClient(cc grpc.ClientConnInterface) MonitorServerClient {
	return &monitorServerClient{cc}
}

func (c *monitorServerClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/monitorserver.MonitorServer/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServerClient) GetCameraConfig(ctx context.Context, in *CameraConfigRequest, opts ...grpc.CallOption) (*CameraConfigReply, error) {
	out := new(CameraConfigReply)
	err := c.cc.Invoke(ctx, "/monitorserver.MonitorServer/GetCameraConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServerClient) NotifyNewPictureCapture(ctx context.Context, in *NewPictureCaptureRequest, opts ...grpc.CallOption) (*NewPictureCaptureReply, error) {
	out := new(NewPictureCaptureReply)
	err := c.cc.Invoke(ctx, "/monitorserver.MonitorServer/NotifyNewPictureCapture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServerClient) GetPicIndex(ctx context.Context, in *PictureIndexRequest, opts ...grpc.CallOption) (*PictureIndexReply, error) {
	out := new(PictureIndexReply)
	err := c.cc.Invoke(ctx, "/monitorserver.MonitorServer/GetPicIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServerClient) HeartbeatToLocalServer(ctx context.Context, in *HeartbeatMessageRequest, opts ...grpc.CallOption) (*HeartbeatMessageReply, error) {
	out := new(HeartbeatMessageReply)
	err := c.cc.Invoke(ctx, "/monitorserver.MonitorServer/HeartbeatToLocalServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitorServerServer is the server API for MonitorServer service.
type MonitorServerServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	GetCameraConfig(context.Context, *CameraConfigRequest) (*CameraConfigReply, error)
	NotifyNewPictureCapture(context.Context, *NewPictureCaptureRequest) (*NewPictureCaptureReply, error)
	GetPicIndex(context.Context, *PictureIndexRequest) (*PictureIndexReply, error)
	HeartbeatToLocalServer(context.Context, *HeartbeatMessageRequest) (*HeartbeatMessageReply, error)
}

// UnimplementedMonitorServerServer can be embedded to have forward compatible implementations.
type UnimplementedMonitorServerServer struct {
}

func (*UnimplementedMonitorServerServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedMonitorServerServer) GetCameraConfig(context.Context, *CameraConfigRequest) (*CameraConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCameraConfig not implemented")
}
func (*UnimplementedMonitorServerServer) NotifyNewPictureCapture(context.Context, *NewPictureCaptureRequest) (*NewPictureCaptureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyNewPictureCapture not implemented")
}
func (*UnimplementedMonitorServerServer) GetPicIndex(context.Context, *PictureIndexRequest) (*PictureIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPicIndex not implemented")
}
func (*UnimplementedMonitorServerServer) HeartbeatToLocalServer(context.Context, *HeartbeatMessageRequest) (*HeartbeatMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartbeatToLocalServer not implemented")
}

func RegisterMonitorServerServer(s *grpc.Server, srv MonitorServerServer) {
	s.RegisterService(&_MonitorServer_serviceDesc, srv)
}

func _MonitorServer_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServerServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitorserver.MonitorServer/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServerServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorServer_GetCameraConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CameraConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServerServer).GetCameraConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitorserver.MonitorServer/GetCameraConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServerServer).GetCameraConfig(ctx, req.(*CameraConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorServer_NotifyNewPictureCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPictureCaptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServerServer).NotifyNewPictureCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitorserver.MonitorServer/NotifyNewPictureCapture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServerServer).NotifyNewPictureCapture(ctx, req.(*NewPictureCaptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorServer_GetPicIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PictureIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServerServer).GetPicIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitorserver.MonitorServer/GetPicIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServerServer).GetPicIndex(ctx, req.(*PictureIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorServer_HeartbeatToLocalServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServerServer).HeartbeatToLocalServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitorserver.MonitorServer/HeartbeatToLocalServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServerServer).HeartbeatToLocalServer(ctx, req.(*HeartbeatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MonitorServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monitorserver.MonitorServer",
	HandlerType: (*MonitorServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _MonitorServer_SayHello_Handler,
		},
		{
			MethodName: "GetCameraConfig",
			Handler:    _MonitorServer_GetCameraConfig_Handler,
		},
		{
			MethodName: "NotifyNewPictureCapture",
			Handler:    _MonitorServer_NotifyNewPictureCapture_Handler,
		},
		{
			MethodName: "GetPicIndex",
			Handler:    _MonitorServer_GetPicIndex_Handler,
		},
		{
			MethodName: "HeartbeatToLocalServer",
			Handler:    _MonitorServer_HeartbeatToLocalServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MonitorServer.proto",
}
